repeat wait() until game:IsLoaded() and game.Players and game.Players.LocalPlayer and game.Players.LocalPlayer.Character
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local gui = playerGui:WaitForChild("Main").ChooseTeam

local repStorage = game:GetService("ReplicatedStorage")
local event = repStorage.Remotes.CommF_
local vu = game:GetService("VirtualUser")
event:InvokeServer("SetTeam","Marines")
spawn(function()
    while true do wait(.15)
   if gui.Visible then
    vu:Button1Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(0.1)
    vu:Button1Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        mousemoveabs(1100,470.427)
   end
end
end)

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) and tonumber(v.playing) == 6 then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

local fruits = {
    "Bomb", 
    "Spike", 
    "Chop", 
    "Spring", 
    "Kilo", 
    "Smoke", 
    "Spin", 
    "Flame",
    "Falcon", 
    "Ice", 
    "Sand", 
    "Dark", 
    "Diamond", 
    "Light", 
    "Love", 
    "Magma", 
    "Door", 
    "Rubber", 
    "Quake", 
    "Human: Buddha", 
    "Barrier", 
    "String", 
    "Bird: Phoenix", 
    "Rumble", 
    "Paw", 
    "Gravity", 
    "Dough", 
    "Control",
    "Dragon", 
    "Venom",
}

local function storeFruit(fruit)
 
        local repStorage = game:GetService("ReplicatedStorage")
        local event = repStorage.Remotes.CommF_
        for i = 1,#fruits do 
            event:InvokeServer("StoreFruit",fruits[i].."-"..fruits[i]) 
            wait(.65)
        end

end

spawn(function()
    while true do wait(.5)
        if workspace:FindFirstChildOfClass("Tool") then
            if workspace:FindFirstChildOfClass("Tool"):FindFirstChild("Fruit") then
                local fruit = workspace:FindFirstChildOfClass("Tool")
                local player = game.Players.LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait()

                local hrp = char:WaitForChild("HumanoidRootPart")

                if (hrp and fruit.Name:find("Fruit")) then
                    spawn(function()
                        storeFruit(fruit)
                       end)
                    char:SetPrimaryPartCFrame(fruit:FindFirstChildOfClass("Part").CFrame)
                
             
                end
            else

                Teleport()
                break
            end
        else
            Teleport()
            break
        end

    end
end)
